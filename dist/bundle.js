(()=>{"use strict";const t=(t,e=!0)=>({name:t,showProgress:e});let e=[],n=[];function r(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function a(t){r(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(t,e){r(2,arguments);var n=a(t),o=a(e),i=n.getTime()-o.getTime();return i>0?-1:i<0?1:i}const i=t=>{var r;r=(t=>(t=>({name:t,priority:1,dueDate:null,isPastDue:!1,project:n[0],notes:null,checklist:null,isComplete:!1,completionDateTime:null,creationDateTime:new Date}))(t))(t),e.push(r)},s=t=>e.filter((e=>e.project===t)).filter((t=>!t.isComplete)).sort(((t,e)=>{if(t.priority>e.priority)return-1;if(t.priority<e.priority)return 1;if(!t.dueDate&&e.dueDate)return 1;if(t.dueDate&&!e.dueDate)return-1;{const n=function(t,e){r(2,arguments);var n=a(t),o=a(e),i=n.getTime()-o.getTime();return i<0?-1:i>0?1:i}(t.dueDate,e.dueDate);return 0!==n?n:o(t.creationDateTime,e.creationDateTime)}})),u=t=>{let n=e.filter((t=>t.isComplete));return"logbook"!==t&&(n=n.filter((e=>e.project===t))),n.sort(((t,e)=>o(t.completionDateTime,e.completionDateTime))),n},c=t=>{t.isComplete=!t.isComplete,t.isComplete?t.completionDateTime=new Date:t.completionDateTime=null};function d(t){return r(1,arguments),t instanceof Date||"object"==typeof t&&"[object Date]"===Object.prototype.toString.call(t)}function l(t){if(r(1,arguments),!d(t)&&"number"!=typeof t)return!1;var e=a(t);return!isNaN(Number(e))}var m={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function h(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}var f,g={date:h({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:h({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:h({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},w={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function p(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=a.width?String(a.width):o;r=t.formattingValues[i]||t.formattingValues[o]}else{var s=t.defaultWidth,u=a.width?String(a.width):t.defaultWidth;r=t.values[u]||t.values[s]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function v(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],o=e.match(a);if(!o)return null;var i,s=o[0],u=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(u)?b(u,(function(t){return t.test(s)})):y(u,(function(t){return t.test(s)}));i=t.valueCallback?t.valueCallback(c):c,i=n.valueCallback?n.valueCallback(i):i;var d=e.slice(s.length);return{value:i,rest:d}}}function y(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function b(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const T={code:"en-US",formatDistance:function(t,e,n){var r,a=m[t];return r="string"==typeof a?a:1===e?a.one:a.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:g,formatRelative:function(t,e,n,r){return w[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:p({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:p({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:p({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:p({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:p({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(f.matchPattern);if(!n)return null;var r=n[0],a=t.match(f.parsePattern);if(!a)return null;var o=f.valueCallback?f.valueCallback(a[0]):a[0];o=e.valueCallback?e.valueCallback(o):o;var i=t.slice(r.length);return{value:o,rest:i}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function k(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function C(t,e){r(2,arguments);var n=a(t).getTime(),o=k(e);return new Date(n+o)}function D(t,e){r(2,arguments);var n=k(e);return C(t,-n)}var M=864e5;function E(t){r(1,arguments);var e=1,n=a(t),o=n.getUTCDay(),i=(o<e?7:0)+o-e;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function x(t){r(1,arguments);var e=a(t),n=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var i=E(o),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var u=E(s);return e.getTime()>=i.getTime()?n+1:e.getTime()>=u.getTime()?n:n-1}function S(t){r(1,arguments);var e=x(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var a=E(n);return a}var P=6048e5;function U(t,e){r(1,arguments);var n=e||{},o=n.locale,i=o&&o.options&&o.options.weekStartsOn,s=null==i?0:k(i),u=null==n.weekStartsOn?s:k(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=a(t),d=c.getUTCDay(),l=(d<u?7:0)+d-u;return c.setUTCDate(c.getUTCDate()-l),c.setUTCHours(0,0,0,0),c}function L(t,e){r(1,arguments);var n=a(t),o=n.getUTCFullYear(),i=e||{},s=i.locale,u=s&&s.options&&s.options.firstWeekContainsDate,c=null==u?1:k(u),d=null==i.firstWeekContainsDate?c:k(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var l=new Date(0);l.setUTCFullYear(o+1,0,d),l.setUTCHours(0,0,0,0);var m=U(l,e),h=new Date(0);h.setUTCFullYear(o,0,d),h.setUTCHours(0,0,0,0);var f=U(h,e);return n.getTime()>=m.getTime()?o+1:n.getTime()>=f.getTime()?o:o-1}function W(t,e){r(1,arguments);var n=e||{},a=n.locale,o=a&&a.options&&a.options.firstWeekContainsDate,i=null==o?1:k(o),s=null==n.firstWeekContainsDate?i:k(n.firstWeekContainsDate),u=L(t,e),c=new Date(0);c.setUTCFullYear(u,0,s),c.setUTCHours(0,0,0,0);var d=U(c,e);return d}var Y=6048e5;function j(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const q=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return j("yy"===e?r%100:r,e.length)},N=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):j(n+1,2)},O=function(t,e){return j(t.getUTCDate(),e.length)},F=function(t,e){return j(t.getUTCHours()%12||12,e.length)},H=function(t,e){return j(t.getUTCHours(),e.length)},A=function(t,e){return j(t.getUTCMinutes(),e.length)},z=function(t,e){return j(t.getUTCSeconds(),e.length)},R=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return j(Math.floor(r*Math.pow(10,n-3)),e.length)};function Q(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=e||"";return n+String(a)+i+j(o,2)}function G(t,e){return t%60==0?(t>0?"-":"+")+j(Math.abs(t)/60,2):X(t,e)}function X(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+j(Math.floor(a/60),2)+n+j(a%60,2)}const B={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return q(t,e)},Y:function(t,e,n,r){var a=L(t,r),o=a>0?a:1-a;return"YY"===e?j(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):j(o,e.length)},R:function(t,e){return j(x(t),e.length)},u:function(t,e){return j(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return j(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return j(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return N(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return j(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){var i=function(t,e){r(1,arguments);var n=a(t),o=U(n,e).getTime()-W(n,e).getTime();return Math.round(o/Y)+1}(t,o);return"wo"===e?n.ordinalNumber(i,{unit:"week"}):j(i,e.length)},I:function(t,e,n){var o=function(t){r(1,arguments);var e=a(t),n=E(e).getTime()-S(e).getTime();return Math.round(n/P)+1}(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):j(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):O(t,e)},D:function(t,e,n){var o=function(t){r(1,arguments);var e=a(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=e.getTime(),i=n-o;return Math.floor(i/M)+1}(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):j(o,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return j(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return j(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return j(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return F(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):H(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):j(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):j(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):A(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):z(t,e)},S:function(t,e){return R(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return G(a);case"XXXX":case"XX":return X(a);default:return X(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return G(a);case"xxxx":case"xx":return X(a);default:return X(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+Q(a,":");default:return"GMT"+X(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+Q(a,":");default:return"GMT"+X(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return j(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return j((r._originalDate||t).getTime(),e.length)}};function $(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function J(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}var _={p:J,P:function(t,e){var n,r=t.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return $(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",$(a,e)).replace("{{time}}",J(o,e))}};const I=_;function V(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var K=["D","DD"],Z=["YY","YYYY"];function tt(t){return-1!==K.indexOf(t)}function et(t){return-1!==Z.indexOf(t)}function nt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var rt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,at=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ot=/^'([^]*?)'?$/,it=/''/g,st=/[a-zA-Z]/;function ut(t){return t.match(ot)[1].replace(it,"'")}const ct=document.querySelector(".content"),dt=t=>{let e;if(t){const r=t.currentTarget;e=n[r.dataset.project]}else e=n[0];St(ct),ht(e),gt(e)},lt=()=>{St(ct),ht("logbook"),gt("logbook")},mt=()=>{St(ct),ht("allProjects"),Ct()},ht=t=>{const e=document.createElement("header"),n=document.createElement("h1");n.textContent=(()=>{switch(t){case"logbook":return t;case"allProjects":return"Projects";default:return t.name}})(),e.append(n),"allProjects"!==t&&ft(t,e),ct.append(e)},ft=(t,e)=>{const n=document.createElement("button");n.textContent="Refresh",n.classList.add("refresh"),e.append(n),n.addEventListener("click",(()=>{gt(t)}))},gt=t=>{let e=document.querySelector(".task-list-container");if(e?St(e):(e=document.createElement("section"),e.classList.add("task-list-container")),"logbook"!==t){const n=document.createElement("section");n.classList.add("task-list"),e.append(n),s(t).forEach((t=>n.append(wt(t))))}const n=document.createElement("section");n.classList.add("task-list","complete-task-list"),e.append(n),u(t).forEach((t=>n.append(wt(t)))),ct.append(e),vt()},wt=t=>{const n=e.indexOf(t),r=document.createElement("div");r.classList.add("task-container"),r.dataset.task=n;const a=document.createElement("input");a.type="checkbox",a.dataset.task=n,a.id=`task-${n}`,t.isComplete&&(a.checked=!0,r.classList.add("complete-task"));const o=document.createElement("label");o.classList.add("task-label"),o.dataset.task=n,o.htmlFor=`task-${n}`,o.addEventListener("click",kt),r.append(a,o);const i=document.createElement("div");i.classList.add("task-info-container"),i.dataset.task=n;const s=document.createElement("div");return s.textContent=t.name,s.classList.add("task-name"),s.dataset.task=n,i.append(s),r.append(i),t.dueDate&&!t.isComplete&&i.append(pt(t)),r.classList.add(`priority-${t.priority}`),r},pt=t=>{const e=document.createElement("p");return e.classList.add("due-date"),e.textContent=function(t,e,n){r(2,arguments);var o=String(e),i=n||{},s=i.locale||T,u=s.options&&s.options.firstWeekContainsDate,c=null==u?1:k(u),d=null==i.firstWeekContainsDate?c:k(i.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=s.options&&s.options.weekStartsOn,h=null==m?0:k(m),f=null==i.weekStartsOn?h:k(i.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var g=a(t);if(!l(g))throw new RangeError("Invalid time value");var w=V(g),p=D(g,w),v={firstWeekContainsDate:d,weekStartsOn:f,locale:s,_originalDate:g};return o.match(at).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,I[e])(t,s.formatLong,v):t})).join("").match(rt).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return ut(n);var a=B[r];if(a)return!i.useAdditionalWeekYearTokens&&et(n)&&nt(n,e,t),!i.useAdditionalDayOfYearTokens&&tt(n)&&nt(n,e,t),a(p,n,s.localize,v);if(r.match(st))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("")}(t.dueDate,"M/d"),t.dueDate<new Date&&e.classList.add("past-due"),e},vt=()=>{document.querySelectorAll(".task-name").forEach((t=>t.addEventListener("click",bt)))},yt=[],bt=t=>{document.querySelectorAll(".task-name").forEach((t=>t.removeEventListener("click",bt)));const e=t.target.dataset.task,n=document.querySelector(`.task-info-container[data-task="${e}"]`),r=document.createElement("div");r.contentEditable=!0,r.classList.add("name-change-input"),r.textContent=t.target.textContent,t.target.remove(),n.prepend(r);const a=document.createRange(),o=window.getSelection();a.setStart(r.childNodes[0],r.textContent.length),a.collapse(!0),o.removeAllRanges(),o.addRange(a),r.focus(),setTimeout((()=>{console.log("this ="),console.log(void 0),document.addEventListener("click",yt[0]=Tt(t,n,r,e)),document.addEventListener("keydown",yt[0])}),10)},Tt=(t,n,r,a)=>function(t){if("click"===t.type&&t.target!==r||"keydown"===t.type&&"Enter"===t.key){console.log(t),console.log(r),e[a].name=r.textContent;const o=document.createElement("div");o.textContent=r.textContent,o.classList.add("task-name"),o.dataset.task=a,r.remove(),n.prepend(o),document.removeEventListener("click",yt[0]),document.removeEventListener("keydown",yt[0]),vt()}},kt=t=>{const n=t.target.dataset.task;document.querySelector(`.task-container[data-task="${n}"]`).classList.toggle("complete-task"),c(e[n])},Ct=()=>{let t=document.querySelector(".project-list-container");t?St(t):(t=document.createElement("section"),t.classList.add("project-list-container"));const e=document.createElement("section");e.classList.add("project-list"),t.append(e),n.filter((t=>s(t).length>0)).forEach((t=>e.append(Dt(t))));const r=document.createElement("section");r.classList.add("project-list"),t.append(r),n.filter((t=>0===s(t).length&&u(t).length>0)).forEach((t=>r.append(Dt(t)))),ct.append(t),xt()},Dt=t=>{const e=document.createElement("div");e.classList.add("project-container"),e.dataset.project=n.indexOf(t);const r=document.createElement("div");return r.textContent=t.name,e.append(r),t.showProgress?e.append(Mt(t)):e.append(Et(t)),e},Mt=t=>{const e=document.createElement("div");e.classList.add("progress-bar-outer");const n=document.createElement("div");n.classList.add("progress-bar-inner"),e.append(n),e.style.width="100%";const r=s(t).length,a=100*r/(u(t).length+r);return n.style.width=`${a}%`,e},Et=t=>{const e=document.createElement("div");e.classList.add("remaining-tasks-num");const n=s(t).length;return e.textContent=`${n} task${1===n?"":"s"}`,e},xt=()=>{document.querySelectorAll(".project-container").forEach((t=>t.addEventListener("click",dt)))},St=t=>{const e=document.createRange(t);e.selectNodeContents(t),e.deleteContents()};(()=>{const r=t("general");n.push(r),console.log(n);const a=t("other",!1);n.push(a);const o=t("empty",!1),s=t("complete",!1);n.push(o,s),i("First Test"),e[0].dueDate=new Date(2022,6,14),e[0].priority=0,i("This is the second test"),e[1].priority=2,i("This is the third test"),e[2].dueDate=new Date(2022,5,16),c(e[2]),e[2].priority=2,i("This is gonna be the fourth test right about here"),e[3].dueDate=new Date(2022,4,15),e.forEach((t=>t.project=n[0])),i("This should not be in General"),e[4].project=n[1],i("Another test"),i("Past due task"),e[6].dueDate=new Date(2022,1,15),i("Most recently finished task"),c(e[7]),i("Another past due"),e[8].dueDate=new Date(2022,1,20),i("Scroll test task"),i("Scroll test task"),i("Scroll test task"),i("Scroll test task"),i("Scroll test task"),i("completed task");const u=e.length-1;c(e[u]),e[u].project=n[3],dt(),document.querySelector("#tab-general").addEventListener("click",dt),document.querySelector("#tab-projects").addEventListener("click",mt),document.querySelector("#tab-logbook").addEventListener("click",lt),console.log(e)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,