(()=>{"use strict";const e=[],t=[],n=["sortByDueDate","sortByPriority","sortByCreationTime"];function a(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function r(e){a(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(a(1,arguments),"string"==typeof e){var t=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return r(e)}const i=(n,a=t[0])=>{const r=s(n,a);return c(r),g(r),localStorage.setItem("storedTaskArray",JSON.stringify(e)),localStorage.setItem("storedProjectArray",JSON.stringify(t)),r},s=(e,t)=>((e,t)=>({name:e,isHighPriority:!1,dueDate:null,isPastDue:!1,project:t,notes:null,checklist:null,isComplete:!1,completionDateTime:null,creationDateTime:new Date}))(e,t),c=t=>{e.push(t)},d=n=>{const a=e[n];f(a),e.splice(n,1),localStorage.setItem("storedTaskArray",JSON.stringify(e)),localStorage.setItem("storedProjectArray",JSON.stringify(t))},l=(e,n=!0)=>{const a=u(e,n);return m(a),localStorage.setItem("storedProjectArray",JSON.stringify(t)),a},u=(e,t)=>((e,t=!0)=>({name:e,showProgress:t,timeCreated:new Date,sortMethod:n[0],incompleteTasks:0,completeTasks:0}))(e,t),m=e=>{t.push(e)},h=(n,a,r)=>{"project"===a&&f(n),n[a]=r,"project"===a&&g(n),t.length>0&&(localStorage.setItem("storedProjectArray",JSON.stringify(t)),e.length>0&&localStorage.setItem("storedTaskArray",JSON.stringify(e)))},g=e=>{e.isComplete?e.project.completeTasks++:e.project.incompleteTasks++},f=e=>{e.isComplete?e.project.completeTasks--:e.project.incompleteTasks--},p={sortByPriority:(e,t)=>t.isHighPriority-e.isHighPriority,sortByDueDate:(e,t)=>!e.dueDate&&t.dueDate?1:e.dueDate&&!t.dueDate?-1:e.dueDate-t.dueDate,sortByCreationTime:(e,t)=>t.creationDateTime-e.creationDateTime,sortByAlphabet:(e,t)=>e.name.localeCompare(t.name)},y=()=>t.filter((e=>0===e.incompleteTasks&&e.completeTasks>0)),w=n=>{f(n),n.isComplete=!n.isComplete,g(n),n.isComplete?n.completionDateTime=new Date:n.completionDateTime=null,localStorage.setItem("storedTaskArray",JSON.stringify(e)),localStorage.setItem("storedProjectArray",JSON.stringify(t))};function v(e){return a(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function b(e){if(a(1,arguments),!v(e)&&"number"!=typeof e)return!1;var t=r(e);return!isNaN(Number(t))}var k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function T(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth,a=e.formats[n]||e.formats[e.defaultWidth];return a}}var C,S={date:T({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:T({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:T({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},D={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(e){return function(t,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&e.formattingValues){var o=e.defaultFormattingWidth||e.defaultWidth,i=r.width?String(r.width):o;a=e.formattingValues[i]||e.formattingValues[o]}else{var s=e.defaultWidth,c=r.width?String(r.width):e.defaultWidth;a=e.values[c]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function x(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,r=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],o=t.match(r);if(!o)return null;var i,s=o[0],c=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth],d=Array.isArray(c)?j(c,(function(e){return e.test(s)})):L(c,(function(e){return e.test(s)}));i=e.valueCallback?e.valueCallback(d):d,i=n.valueCallback?n.valueCallback(i):i;var l=t.slice(s.length);return{value:i,rest:l}}}function L(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}function j(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}const M={code:"en-US",formatDistance:function(e,t,n){var a,r=k[e];return a="string"==typeof r?r:1===t?r.one:r.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:S,formatRelative:function(e,t,n,a){return D[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(C={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(C.matchPattern);if(!n)return null;var a=n[0],r=e.match(C.parsePattern);if(!r)return null;var o=C.valueCallback?C.valueCallback(r[0]):r[0];o=t.valueCallback?t.valueCallback(o):o;var i=e.slice(a.length);return{value:o,rest:i}}),era:x({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:x({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:x({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:x({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:x({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function P(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function q(e,t){a(2,arguments);var n=r(e).getTime(),o=P(t);return new Date(n+o)}function O(e,t){a(2,arguments);var n=P(t);return q(e,-n)}var U=864e5;function N(e){a(1,arguments);var t=1,n=r(e),o=n.getUTCDay(),i=(o<t?7:0)+o-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function I(e){a(1,arguments);var t=r(e),n=t.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var i=N(o),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var c=N(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=c.getTime()?n:n-1}function W(e){a(1,arguments);var t=I(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=N(n);return r}var A=6048e5;function Y(e,t){a(1,arguments);var n=t||{},o=n.locale,i=o&&o.options&&o.options.weekStartsOn,s=null==i?0:P(i),c=null==n.weekStartsOn?s:P(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=r(e),l=d.getUTCDay(),u=(l<c?7:0)+l-c;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function H(e,t){a(1,arguments);var n=r(e),o=n.getUTCFullYear(),i=t||{},s=i.locale,c=s&&s.options&&s.options.firstWeekContainsDate,d=null==c?1:P(c),l=null==i.firstWeekContainsDate?d:P(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(o+1,0,l),u.setUTCHours(0,0,0,0);var m=Y(u,t),h=new Date(0);h.setUTCFullYear(o,0,l),h.setUTCHours(0,0,0,0);var g=Y(h,t);return n.getTime()>=m.getTime()?o+1:n.getTime()>=g.getTime()?o:o-1}function F(e,t){a(1,arguments);var n=t||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,i=null==o?1:P(o),s=null==n.firstWeekContainsDate?i:P(n.firstWeekContainsDate),c=H(e,t),d=new Date(0);d.setUTCFullYear(c,0,s),d.setUTCHours(0,0,0,0);var l=Y(d,t);return l}var B=6048e5;function G(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const J=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return G("yy"===t?a%100:a,t.length)},z=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):G(n+1,2)},R=function(e,t){return G(e.getUTCDate(),t.length)},$=function(e,t){return G(e.getUTCHours()%12||12,t.length)},Q=function(e,t){return G(e.getUTCHours(),t.length)},X=function(e,t){return G(e.getUTCMinutes(),t.length)},_=function(e,t){return G(e.getUTCSeconds(),t.length)},V=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return G(Math.floor(a*Math.pow(10,n-3)),t.length)};function K(e,t){var n=e>0?"-":"+",a=Math.abs(e),r=Math.floor(a/60),o=a%60;if(0===o)return n+String(r);var i=t||"";return n+String(r)+i+G(o,2)}function Z(e,t){return e%60==0?(e>0?"-":"+")+G(Math.abs(e)/60,2):ee(e,t)}function ee(e,t){var n=t||"",a=e>0?"-":"+",r=Math.abs(e);return a+G(Math.floor(r/60),2)+n+G(r%60,2)}const te={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return J(e,t)},Y:function(e,t,n,a){var r=H(e,a),o=r>0?r:1-r;return"YY"===t?G(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):G(o,t.length)},R:function(e,t){return G(I(e),t.length)},u:function(e,t){return G(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return G(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return G(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return z(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return G(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,o){var i=function(e,t){a(1,arguments);var n=r(e),o=Y(n,t).getTime()-F(n,t).getTime();return Math.round(o/B)+1}(e,o);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):G(i,t.length)},I:function(e,t,n){var o=function(e){a(1,arguments);var t=r(e),n=N(t).getTime()-W(t).getTime();return Math.round(n/A)+1}(e);return"Io"===t?n.ordinalNumber(o,{unit:"week"}):G(o,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):R(e,t)},D:function(e,t,n){var o=function(e){a(1,arguments);var t=r(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var o=t.getTime(),i=n-o;return Math.floor(i/U)+1}(e);return"Do"===t?n.ordinalNumber(o,{unit:"dayOfYear"}):G(o,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var r=e.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return G(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var r=e.getUTCDay(),o=(r-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return G(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),r=0===a?7:a;switch(t){case"i":return String(r);case"ii":return G(r,t.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,r=e.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,r=e.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return $(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):Q(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):G(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):G(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):X(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):_(e,t)},S:function(e,t){return V(e,t)},X:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return Z(r);case"XXXX":case"XX":return ee(r);default:return ee(r,":")}},x:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return Z(r);case"xxxx":case"xx":return ee(r);default:return ee(r,":")}},O:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+K(r,":");default:return"GMT"+ee(r,":")}},z:function(e,t,n,a){var r=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+K(r,":");default:return"GMT"+ee(r,":")}},t:function(e,t,n,a){var r=a._originalDate||e;return G(Math.floor(r.getTime()/1e3),t.length)},T:function(e,t,n,a){return G((a._originalDate||e).getTime(),t.length)}};function ne(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}}function ae(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}}var re={p:ae,P:function(e,t){var n,a=e.match(/(P+)(p+)?/)||[],r=a[1],o=a[2];if(!o)return ne(e,t);switch(r){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",ne(r,t)).replace("{{time}}",ae(o,t))}};const oe=re;function ie(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}var se=["D","DD"],ce=["YY","YYYY"];function de(e){return-1!==se.indexOf(e)}function le(e){return-1!==ce.indexOf(e)}function ue(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var me=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,he=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ge=/^'([^]*?)'?$/,fe=/''/g,pe=/[a-zA-Z]/;function ye(e,t,n){a(2,arguments);var o=String(t),i=n||{},s=i.locale||M,c=s.options&&s.options.firstWeekContainsDate,d=null==c?1:P(c),l=null==i.firstWeekContainsDate?d:P(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=s.options&&s.options.weekStartsOn,m=null==u?0:P(u),h=null==i.weekStartsOn?m:P(i.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var g=r(e);if(!b(g))throw new RangeError("Invalid time value");var f=ie(g),p=O(g,f),y={firstWeekContainsDate:l,weekStartsOn:h,locale:s,_originalDate:g},w=o.match(he).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,oe[t])(e,s.formatLong,y):e})).join("").match(me).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return we(n);var r=te[a];if(r)return!i.useAdditionalWeekYearTokens&&le(n)&&ue(n,t,e),!i.useAdditionalDayOfYearTokens&&de(n)&&ue(n,t,e),r(p,n,s.localize,y);if(a.match(pe))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("");return w}function we(e){return e.match(ge)[1].replace(fe,"'")}const ve=document.querySelector(".content"),be=(e,t=!1)=>{const n=document.createElement("header");n.classList.add("tf-header"),t?n.append(Fe("allIncompleteTasks")):n.append(Fe(e.project)),n.append($e(e));const a=Ze(e,"name","tf-task");return n.append(a),n},ke=(e,t,n)=>{const a=document.createElement("div");return a.classList.add("choice-container"),a.append(Te(e),t(n)),a},Te=e=>{const t=document.createElement("div");return t.classList.add("choice-label"),t.textContent=e,t},Ce=n=>{const a=document.createElement("select");a.dataset.task=e.indexOf(n),t.forEach((e=>{const t=document.createElement("option");t.value=e.name,t.textContent=e.name,a.append(t)}));const r=n.project;return a.value=r.name,a.addEventListener("change",(n=>{const a=t.find((e=>e.name===n.target.value)),r=e[n.target.dataset.task];h(r,"project",a)})),a},Se=t=>{const n=$e(t,t.isHighPriority,(t=>{const n=e[t.target.dataset.task];h(n,"isHighPriority",!n.isHighPriority)}));return n},De=e=>{const t=document.createElement("div");t.classList.add("tf-due-date-container");const n=xe(e),a=$e(e,e.dueDate,Ee);return t.append(a,n),t},Ee=t=>{const n=e[t.target.dataset.task],a=document.querySelector("input[type='date']");if(n.dueDate)h(n,"dueDate",null),a.disabled=!0;else{const e=a.value.split("-");h(n,"dueDate",new Date(e[0],e[1]-1,e[2])),a.disabled=!1}},xe=t=>{const n=document.createElement("input");return n.type="date",n.dataset.task=e.indexOf(t),t.dueDate?n.value=ye(t.dueDate,"yyyy-MM-dd"):(n.value=ye(new Date,"yyyy-MM-dd"),n.disabled=!0),n.addEventListener("change",(t=>{const a=e[t.target.dataset.task],r=n.value.split("-");h(a,"dueDate",new Date(r[0],r[1]-1,r[2]))})),n},Le=e=>Ze(e,"notes","tf-task"),je=(document.querySelector(".content"),()=>{e.splice(0,e.length),t.splice(1,t.length-1),t[0].incompleteTasks=0,t[0].completeTasks=0,localStorage.clear()}),Me=(e,...t)=>{for(let n=0;n<t.length;n++)h(t[n],"project",e)},Pe=document.querySelector(".content");let qe=0,Oe=!1;const Ue=e=>{let n;if(e){const a=e.currentTarget;n=t[a.dataset.project];const r=document.querySelector(".header-project-name");r&&r.textContent.toLowerCase()!==n.name.toLowerCase()&&(Oe=!1)}else n=t[0];n===t[0]&&We(n),bt(),Ae(n),ze(n),Pe.append(at(n))},Ne=()=>{const e=document.querySelector(".header-project-name");e&&"projects"!==e.textContent.toLowerCase()&&(Oe=!1),We("projects"),bt(),Ae("allProjects"),mt(),Pe.append(at("allProjects"))},Ie=()=>{const e=document.querySelector(".header-project-name");e&&"incomplete"!==e.textContent.toLowerCase()&&(Oe=!1),We("incomplete"),bt(),Ae("allIncompleteTasks"),ze("allIncompleteTasks")},We=e=>{document.querySelectorAll(".footer-tab").forEach((t=>{t.textContent.toLowerCase()===e||e.name&&t.textContent.toLowerCase()===e.name.toLowerCase()?t.classList.add("active-tab"):t.classList.remove("active-tab")}))},Ae=e=>{const n=document.createElement("header");if("string"!=typeof e&&e!==t[0]){n.append(Fe("allProjects"));const t=Ze(e,"name","header-project");n.append(t)}else{const t=document.createElement("div");t.classList.add("header-project-name"),t.classList.add("preset-name"),t.textContent=(()=>{switch(e){case"allIncompleteTasks":return"Incomplete";case"allProjects":return"Projects";default:return e.name}})(),n.append(t)}const a=document.createElement("div");a.classList.add("header-btns-container"),"allProjects"!==e&&("allIncompleteTasks"!==e&&a.append(Ye(e)),a.append(Be(e))),"allProjects"===e&&a.append(lt()),a.append(Ge()),n.append(a),Pe.append(n)},Ye=e=>{const n=document.createElement("div");n.classList.add("sort-container");const a=document.createElement("div");a.textContent="Sort by:";const r=document.createElement("button");return r.classList.add("sort-button"),r.dataset.project=t.indexOf(e),r.textContent=(()=>{switch(e.sortMethod){case"sortByPriority":return"Priority";case"sortByDueDate":return"Due Date";case"sortByCreationTime":return"Time Created"}})(),r.addEventListener("click",He),n.append(a,r),n},He=a=>{const r=a.target.dataset.project;(a=>{t.indexOf(a);const r=n.indexOf(a.sortMethod);a.sortMethod=n[(r+1)%n.length],localStorage.setItem("storedProjectArray",JSON.stringify(t)),e.length>0&&localStorage.setItem("storedTaskArray",JSON.stringify(e))})(t[r]),Ue(a)},Fe=e=>{const n=document.createElement("button");return n.classList.add("back-btn"),st(n,"chevron_left"),n.dataset.project="object"==typeof e?t.indexOf(e):e,n.addEventListener("click",(e=>{switch(e.target.dataset.project){case"allProjects":Ne();break;case"allIncompleteTasks":Ie();break;default:Ue(e)}})),n},Be=e=>{const n=document.createElement("button");return n.classList.add("refresh"),st(n,"refresh"),n.dataset.project=t.indexOf(e),n.addEventListener("click",(t=>{"allIncompleteTasks"!==e?Ue(t):Ie()})),n},Ge=()=>{const e=document.createElement("button");return e.classList.add("delete-toggle"),Oe?(st(e,"remove"),e.dataset.isInactive=-1):(st(e,"delete_sweep"),e.dataset.isInactive=1),e.addEventListener("mousedown",Je),e},Je=()=>{const e=document.querySelector(".delete-toggle");let t=e.dataset.isInactive;if(Oe=!Oe,t*=-1,e.dataset.isInactive=t,t>0)st(e,"delete_sweep");else{st(e,"remove");const t=document.querySelector(".progress-toggles-toggle");t&&t.dataset.isInactive<0&&ut()}const n=document.querySelectorAll(".task-form-btn"),a=document.querySelectorAll(".delete-btn");n.forEach((e=>e.classList.toggle("invisible"))),a.forEach((e=>e.classList.toggle("invisible"))),document.querySelector(".demo-btn")&&(document.querySelector(".clear-all-btn").classList.toggle("invisible"),document.querySelector(".demo-btn").classList.toggle("invisible"))},ze=a=>{let r=document.querySelector(".task-list-container");if(r?bt(r):(r=document.createElement("section"),r.classList.add("task-list-container")),a.incompleteTasks>0||"allIncompleteTasks"===a&&e.length>0){const t=document.createElement("section");t.classList.add("task-list","incomplete-task-list"),"allIncompleteTasks"!==a&&a.completeTasks>0?t.classList.add("incomplete-task-list-border"):t.classList.remove("incomplete-task-list-border"),r.append(t),(t=>{let a;return a="allIncompleteTasks"===t?n[0]:t.sortMethod,e.filter((e=>"allIncompleteTasks"===t||e.project===t)).filter((e=>!e.isComplete)).sort(((e,t)=>{let n=0;if(n=p[a](e,t),0!==n)return n;for(let r in p)if(r!==a&&(n=p[r](e,t),0!==n))return n;return n}))})(a).forEach((e=>t.append(Re(e))))}if("allIncompleteTasks"!==a){const t=document.createElement("section");t.classList.add("task-list","complete-task-list"),r.append(t),(t=>{let n=e.filter((e=>e.isComplete));return"allIncompleteTasks"!==t&&(n=n.filter((e=>e.project===t))),n.sort(((e,t)=>t.completionDateTime-e.completionDateTime)),n})(a).forEach((e=>t.append(Re(e))))}r.append(ct()),a===t[0]&&r.append(dt()),Pe.append(r)},Re=t=>{const n=e.indexOf(t),a=document.createElement("div");a.classList.add("task-container"),a.dataset.task=n,a.append($e(t)),t.isComplete&&a.classList.add("complete-task");const r=document.createElement("div");r.classList.add("task-info-container"),r.dataset.task=n;const o=Ze(t,"name","task");return r.append(o),t.dueDate&&!t.isComplete&&r.append(Qe(t)),a.append(r),a.append(Xe(t)),a.append(_e(t)),t.isHighPriority&&a.classList.add("priority-high"),a},$e=(t,n=t.isComplete,a=nt)=>{const r=document.createElement("div");r.classList.add("checkbox-container");const o=e.indexOf(t),i=document.createElement("input");i.type="checkbox",i.dataset.task=o,i.checked=n,i.id=`checkbox-${qe}`;const s=document.createElement("label");return s.classList.add("task-label"),s.dataset.task=o,s.htmlFor=`checkbox-${qe}`,s.addEventListener("click",a),r.append(i,s),qe++,r},Qe=e=>{const t=document.createElement("p");return t.classList.add("due-date"),t.textContent=ye(e.dueDate,"M/d"),e.dueDate<new Date&&t.classList.add("past-due"),t},Xe=t=>{const n=document.createElement("button");return n.classList.add("task-form-btn"),Oe&&n.classList.add("invisible"),st(n,"chevron_right"),n.dataset.task=e.indexOf(t),"incomplete"===document.querySelector(".header-project-name").textContent.toLowerCase()&&(n.dataset.projectName="allIncompleteTasks"),n.addEventListener("click",(t=>{setTimeout((()=>{(t=>{bt();const n=e[t.target.dataset.task];"allIncompleteTasks"===t.target.dataset.projectName?ve.append(be(n,!0)):ve.append(be(n)),ve.append(ke("Project",Ce,n)),ve.append(ke("High priority?",Se,n)),ve.append(ke("Due date?",De,n)),ve.append(ke("Notes:",Le,n)),ve.append((e=>{const t=document.createElement("div");return t.classList.add("completion-date"),e.completionDateTime?t.textContent=`Completed on ${ye(e.completionDateTime,"MMMM do, yyyy")}`:t.classList.add("invisible"),document.querySelector("#checkbox-0").addEventListener("change",(e=>{t.textContent=`Completed on ${ye(new Date,"MMMM do, yyyy")}`,t.classList.toggle("invisible")})),t})(n)),document.querySelectorAll(".checkbox-container").forEach((e=>e.classList.add("tf-checkbox-container")))})(t)}),10)})),n},_e=n=>{const a=document.createElement("button");a.classList.add("delete-btn"),Oe||a.classList.add("invisible"),st(a,"close");const r=e.indexOf(n);return-1!==r?(a.dataset.task=r,a.dataset.project=t.indexOf(n.project)):a.dataset.project=t.indexOf(n),a.addEventListener("click",(e=>{Ve(e),-1!==r?"incomplete"===document.querySelector(".header-project-name").textContent.toLowerCase()?Ie():Ue(e):Ne()})),a},Ve=n=>{if(n.target.dataset.task){const e=n.target.dataset.task;d(e)}else(n=>{const a=e.filter((e=>e.project===t[n])),r=[];a.forEach((t=>r.push(e.indexOf(t))));const o=e.filter((e=>e.project===t[n])).map((t=>e.indexOf(t)));for(let e=o.length-1;e>=0;e--)d(o[e])})(a=n.target.dataset.project),t.splice(a,1),localStorage.setItem("storedTaskArray",JSON.stringify(e)),localStorage.setItem("storedProjectArray",JSON.stringify(t));var a},Ke=[],Ze=(n,a,r)=>{const o=document.createElement("div");o.classList.add(`${r}-${a}`),n[a]?o.textContent=n[a]:o.textContent=`(Enter ${a} here)`;let i=e.indexOf(n);return-1===i?(i=t.indexOf(n),o.dataset.project=i):o.dataset.task=i,o.contentEditable=!0,o.autocapitalize="sentences",o.addEventListener("focus",Ke[0]=et(n,a)),"project"===r&&o.addEventListener("mousedown",(e=>e.preventDefault())),o},et=(e,t)=>function(n){const a=n.target;document.addEventListener("mousedown",Ke[1]=tt(n,a,e,t)),document.addEventListener("keydown",Ke[1]),document.addEventListener("focusout",Ke[1])},tt=(e,t,n,a)=>function(e){"mousedown"===e.type&&e.target!==t||"keydown"===e.type&&"Enter"===e.key||"focusout"===e.type?(e.preventDefault(),t.blur(),""===t.textContent&&(t.classList.contains("project-name")?t.textContent="(New project name)":t.textContent=`(Enter ${a} here)`),h(n,a,t.textContent),document.removeEventListener("mousedown",Ke[1]),document.removeEventListener("keydown",Ke[1]),document.removeEventListener("focusout",Ke[1]),document.querySelector(".project-list")&&mt()):"keydown"!==e.type||t.textContent!==`(Enter ${a} here)`&&"(New project name)"!==t.textContent||(t.textContent="")},nt=t=>{const n=t.target.dataset.task,a=document.querySelector(`.task-container[data-task="${n}"]`);a&&a.classList.toggle("complete-task"),w(e[n])},at=n=>{const a=document.createElement("div");a.classList.add("footer-btn-container"),n===t[0]&&a.append((()=>{const e=document.createElement("button");return e.classList.add("clear-all-btn"),Oe||e.classList.add("invisible"),e.textContent="Clear all",e.addEventListener("click",(()=>{je(),Ue()})),e})(),(()=>{const n=document.createElement("button");return n.classList.add("demo-btn"),Oe||n.classList.add("invisible"),n.textContent="Demo",n.addEventListener("click",(()=>{(()=>{i("Book my flight for Paris"),e[e.length-1].dueDate=new Date(2022,6,14),e[e.length-1].isHighPriority=!0,i("Give that book back to Will"),e[e.length-1].isHighPriority=!0,i("Finish Poisonwood Bible for book club"),e[e.length-1].dueDate=new Date(2022,5,16),w(e[e.length-1]),e[e.length-1].isHighPriority=!0,i("Get car serviced"),e[e.length-1].dueDate=new Date(2022,4,15),i("See if that apartment in Santa Monica is still available"),i("Send thank you note to Grandma"),e[e.length-1].dueDate=new Date(2022,1,15),i("Check on party timing for Mom"),w(e[e.length-1]),i("Cancel gym membership"),e[e.length-1].dueDate=new Date(2022,1,20),i("Find a time to get lunch with Ivana"),i("Call Sarah back"),l("grocery list",!1);const n=[];["Bananas","Apples","Garlic","Soy sauce","Pasta","Crushed tomatoes","Hamburgers","Hamburger buns","Swiss cheese","Bagels","Cream cheese","La Croix","Broccoli","Ribs","Oregano","Amber ale"].forEach((e=>{n.push(i(e)),"b"!==e[0].toLowerCase()&&"a"!==e[0].toLowerCase()||w(n[n.length-1])})),Me(t[t.length-1],...n),l("Party checklist",!0);const a=[],r=["Get alcohol","Clean living room","Confirm everyone's coming","Find a good playlist","Make snacks"];for(let e=0;e<r.length;e++)a[e]=i(r[e]),w(a[e]);Me(t[t.length-1],...a);const o=e=>Math.floor(Math.random()*e);l("school stuff");const s=[],c=["Finish Gatsby essay","Get new highlighters","Study for SAT","See if Chelsea will let me copy her APUSH vocab","Memorize hand bones","Look at colleges","Bake something for French","See if I left my stat folder in the locker room","Renew my parking pass","Email Ms. Fishman about test grade","Decorate poster for lit presentation"];for(let e=0;e<c.length;e++)s[e]=i(c[e]),e>c.length/4*3&&(s[e].isHighPriority=!0),e%3==0&&w(s[e]),s[e].dueDate=new Date(2022,o(11)+1,o(27)+1);Me(t[t.length-1],...s),l("Household chores");const d=[],u=["Do the dishes","Put clean clothes away","Scrub stick spot on kitchen floor","Clean shower grout","Vacuum living room","Find extra charging cable","See if that new needle will work with the record player","Get the guest room ready","Get screw for that outlet extender","Hang tree art in the living room","Finish tidying bedroom","Dust the entertainment console","Find new art for the wall over the bar cart","Fix the printer","Put the fire alarm back up","Water the cactus"];for(let e=0;e<u.length;e++)d[e]=i(u[e]),e>u.length/3*2&&(d[e].isHighPriority=!0),e>u.length/4*3&&w(d[e]);Me(t[t.length-1],...d)})(),Oe=!1,Ue()})),n})()),a.append(rt(n));const r=document.querySelector("footer");return a.style.bottom=r.offsetHeight/10+"rem",a},rt=e=>{const t=document.createElement("button");return t.classList.add("new-item-btn"),st(t,"add"),t.addEventListener("click",(t=>{"allProjects"===e&&document.querySelector(".progress-toggles-toggle").dataset.isInactive<0&&ut(),ot(t,e)})),t},ot=(n,a)=>{if("allProjects"!==a){let t;if(document.querySelector(".incomplete-task-list"))t=document.querySelector(".incomplete-task-list");else{const e=document.querySelector(".task-list-container");t=document.createElement("section"),t.classList.add("task-list","incomplete-task-list"),e.prepend(t)}const n=i("(Enter name here)",a);t.append(Re(n));const r=document.querySelector(`.task-name[data-task="${e.indexOf(n)}"]`);it(r)}else{let e;if(vt(),document.querySelector(".incomplete-project-list"))e=document.querySelector(".incomplete-project-list");else{const t=document.querySelector(".project-list-container");e=document.createElement("section"),e.classList.add("project-list","incomplete-project-list"),t.prepend(e)}const n=l("(New project name)"),a=t.indexOf(n);e.append(ht(n));const r=document.querySelector(`.project-info-container[data-project="${a}"] .project-name`);it(r)}},it=e=>{const t=document.createRange(),n=window.getSelection();t.setStart(e.childNodes[0],e.textContent.length),t.collapse(!0),n.removeAllRanges(),n.addRange(t),e.focus()},st=(e,t)=>{e.textContent=t,e.classList.add("material-symbols-outlined")},ct=()=>{const e=document.createElement("div");return e.classList.add("empty-space"),e},dt=()=>{const e=document.createElement("div");e.classList.add("credit"),e.textContent="Made by ";const t=document.createElement("a");return t.href="https://cutlersheridan.github.io/portfolio/",t.textContent="Cutler Sheridan",e.append(t),e},lt=()=>{const e=document.createElement("button");return e.classList.add("progress-toggles-toggle"),e.dataset.isInactive=1,st(e,"percent"),e.addEventListener("click",ut),e},ut=()=>{const e=document.querySelector(".progress-toggles-toggle");let t=e.dataset.isInactive;t*=-1,e.dataset.isInactive=t,t>0?st(e,"percent"):(st(e,"remove"),document.querySelector(".delete-toggle").dataset.isInactive<0&&Je());const n=document.querySelectorAll(".progress-toggle");n.length>0&&n.forEach((e=>e.classList.toggle("invisible")))},mt=()=>{let e=document.querySelector(".project-list-container");if(e?bt(e):(e=document.createElement("section"),e.classList.add("project-list-container")),t.some((e=>e.incompleteTasks>0&&e!==t[0]||0===e.incompleteTasks&&0===e.completeTasks&&e!==t[0]))){const n=document.createElement("section");n.classList.add("project-list","incomplete-project-list"),y().length>0?n.classList.add("incomplete-project-list-border"):n.classList.remove("incomplete-project-list-border"),e.append(n),t.filter((e=>e.incompleteTasks>0||0===e.incompleteTasks&&0===e.completeTasks)).sort(((e,t)=>e.name.localeCompare(t.name))).forEach((e=>{e!==t[0]&&n.append(ht(e))}))}const n=document.createElement("section");n.classList.add("project-list"),e.append(n),y().forEach((e=>n.append(ht(e,!0)))),Pe.append(e),wt()},ht=(e,n=!1)=>{const a=document.createElement("div");a.classList.add("project-container");const r=document.createElement("div");r.dataset.project=t.indexOf(e),r.classList.add("project-info-container");const o=Ze(e,"name","project");if(r.append(o),n)a.classList.add("complete-project");else{const t=document.createElement("div");t.classList.add("progress-container"),t.append(ft(e)),e.showProgress&&t.append(gt(e)),r.append(t)}return a.append(r,_e(e)),n||a.append(pt(e)),a},gt=e=>{const n=document.createElement("div");n.classList.add("progress-bar-outer","project-progress-element"),n.dataset.project=t.indexOf(e);const a=document.createElement("div");a.classList.add("progress-bar-inner"),n.append(a);const r=e.incompleteTasks+e.completeTasks,o=100*e.completeTasks/r;return a.style.width=`${o}%`,n},ft=e=>{const n=document.createElement("div");n.classList.add("remaining-tasks-num","project-progress-element"),n.dataset.project=t.indexOf(e);const a=e.incompleteTasks;return n.textContent=`${a} item${1===a?"":"s"}`,n},pt=e=>{const n=document.createElement("button");return n.classList.add("progress-toggle"),st(n,"percent"),n.dataset.project=t.indexOf(e),n.classList.add("invisible"),n.addEventListener("click",yt),n},yt=e=>{const n=e.target.dataset.project,a=t[n],r=document.querySelector(`.project-info-container[data-project="${n}"] .progress-container`),o=document.querySelector(`.progress-bar-outer[data-project="${n}"]`);o?o.remove():r.append(gt(a)),h(a,"showProgress",!a.showProgress)},wt=()=>{document.querySelectorAll(".project-info-container").forEach((e=>e.addEventListener("click",Ue)))},vt=()=>{document.querySelectorAll(".project-info-container").forEach((e=>e.removeEventListener("click",Ue)))},bt=(e=Pe)=>{const t=document.createRange(e);t.selectNodeContents(e),t.deleteContents(),qe=0};localStorage.length>0&&((()=>{if(localStorage.getItem("storedProjectArray")){const e=JSON.parse(localStorage.getItem("storedProjectArray"));localStorage.removeItem("storedProjectArray"),e.forEach((e=>{const t=l(e.name);for(let n in e)"timeCreated"===n?h(t,n,o(e[n])):"incompleteTasks"!==n&&"completeTasks"!==n&&h(t,n,e[n])}))}})(),(()=>{if(localStorage.getItem("storedTaskArray")){const e=JSON.parse(localStorage.getItem("storedTaskArray"));localStorage.removeItem("storedTaskArray"),e.forEach((e=>{const n=t.findIndex((t=>t.name===e.project.name&&t.showProgress===e.project.showProgress&&t.sortMethod===e.project.sortMethod)),a=i(e.name,t[n]);for(let t in e)"dueDate"===t||"completionDateTime"===t||"creationDateTime"===t?null!==e[t]&&h(a,t,o(e[t])):"isComplete"===t?!0===e[t]&&w(a):"isPastDue"!==t&&"project"!==t&&h(a,t,e[t])}))}})()),!t.length>0&&l("general"),Ue(),document.querySelector("#tab-general").addEventListener("click",Ue),document.querySelector("#tab-projects").addEventListener("click",Ne),document.querySelector("#tab-logbook").addEventListener("click",Ie)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,