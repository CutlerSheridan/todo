(()=>{"use strict";const e=e=>({title:e,showProgress:!0});let t=[],s=[];const o=e=>{var o;o=(e=>(e=>({name:e,priority:1,dueDate:null,isPastDue:!1,project:s[0],notes:null,checklist:null,isComplete:!1,completionDateTime:null}))(e))(e),t.push(o)},a=document.querySelector(".content"),n=e=>{const s=document.createElement("div");s.classList.add("task-container"),s.dataset.task=t.indexOf(e);const o=document.createElement("label");o.classList.add("task-label"),o.dataset.task=t.indexOf(e);const a=document.createElement("input");if(a.type="checkbox",a.dataset.task=t.indexOf(e),a.addEventListener("change",i),o.append(a),o.append(e.name),s.append(o),e.dueDate){const t=document.createElement("p");t.classList.add("due-date"),t.textContent=e.dueDate,s.append(t)}return e.isComplete&&(a.checked=!0,s.classList.add("complete-task")),s.classList.add(`priority-${e.priority}`),s},i=e=>{const s=e.target.dataset.task;var o;document.querySelector(`.task-container[data-task="${s}"]`).classList.toggle("complete-task"),(o=t[s]).isComplete=!o.isComplete,o.isComplete||(o.completionDateTime=null),console.log(t[s])};(()=>{const i=e("General");s.push(i),console.log(s);const c=e("Other");s.push(c),o("First Test"),t[0].dueDate="7/14",t[0].priority=0,o("This is the second test"),t[1].priority=2,o("This is the third test"),t[2].dueDate="6/16",t[2].isComplete=!0,t[2].priority=2,o("This is gonna be the fourth test right about here"),t[3].dueDate="5/15",t.forEach((e=>e.project=s[0])),o("This should not be in General"),t[4].project=s[1],o("Another test"),(()=>{const e=document.createElement("h1");e.textContent="General",a.append(e),(()=>{const e=document.createElement("section"),o=document.createElement("section");o.classList.add("task-list");const i=document.createElement("section");i.classList.add("task-list"),e.append(o,i),a.append(e),((e=s[0])=>t.filter((t=>t.project===e)).filter((e=>!e.isComplete)).sort(((e,t)=>e.priority>t.priority?-1:1)))().forEach((e=>o.append(n(e)))),((e=s[0])=>t.filter((t=>t.project===e)).filter((e=>e.isComplete)).sort(((e,t)=>e.completionDateTime>t.completionDateTime?-1:1)))().forEach((e=>i.append(n(e))))})()})(),console.log(t)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,